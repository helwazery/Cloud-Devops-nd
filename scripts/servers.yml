Description: >
    Hala Elwazery / this is Udacity cloud devops engineer nd -project2 servers 

Parameters:

  EnvironmentName:
      Description: Single Parameter that we are passing with the env name.
      Type: String
  StudentName: 
      Description: student name who submitted that project
      Type: String
Resources:
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our load balancer on port 80
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our hosts and SSH from local only
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
          Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Web Sever Sec Group
          - Key: StudentName
            Value: !Ref StudentName
    #ProfileWithRolesForOurApp:
        #Type: AWS::IAM::InstanceProfile
        #Properties:
        #  Roles:
        #  - UdacityS3ReadOnlyEC2
    WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
           #!/bin/bash
           apt-get update -y
           apt-get install unzip awscli -y
           apt-get install apache2 -y
           systemctl start apache2.service
           cd /var/www/html
           aws s3 cp s3://udacity-project2-zip/udacity.zip .
           unzip -o udacity.zip
           echo "it works! Udagram, Udacity!" > index.html
        ImageId: ami-0e342d72b12109f91
        SecurityGroups:
          - Ref: WebServerSecGroup
       # IamInstanceProfile:
        #  - Ref: ProfileWithRolesForOurApp
        InstanceType: t3.medium
        BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          VPCZoneIdentifier:
          - Fn::ImportValue: 
              !Sub "${EnvironmentName}-PRIV-NETS"
          LaunchConfigurationName:
            Ref: WebAppLaunchConfig
          MinSize: '4'
          MaxSize: '4'
          TargetGroupARNs:
          - Ref: WebAppTargetGroup
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
            Fn::ImportValue:
              Fn::Sub: "${EnvironmentName}-VPCID"
    WebAppLB:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
          Subnets:
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
          SecurityGroups:
            - Ref: LBSecGroup
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Web Balancer
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
            - Type: forward
              TargetGroupArn:
               Ref: WebAppTargetGroup
          LoadBalancerArn:
               Ref: WebAppLB
          Port: '80'
          Protocol: HTTP
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
            - Type: forward
              TargetGroupArn: !Ref 'WebAppTargetGroup'
          Conditions:
               - Field: path-pattern
                 Values: [/]
          ListenerArn: !Ref 'Listener'
          Priority: 1
Outputs:
    WebAppLB:
        Description: The load balancer URL
        Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName,]]
        Export:
          Name: !Sub ${EnvironmentName}-DNS-NAME